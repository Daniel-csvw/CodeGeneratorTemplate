<#@ template language="c#" HostSpecific="True" #>
<#@ output extension= ".vue" #>
<#
	TableHost host = (TableHost)(Host);    
#>
	 
<template>
    <div class="content-inner">
        <Card>
            <bingo-query ref="query" type="float" :col="query.col" :labelWidth="query.labelWidth" @on-submit="getData" @on-reset="getData" :data="queryData" >	
 <# foreach (ColumnInfo c in host.Fieldlist) { #>		 
			 <# if (!c.IsPrimaryKey && !c.IsIdentity) { #>
                <bingo-grid-item>
			       <# if(c.ColumnName.Contains("is_")) {#>
	               <FormItem label="<#= c.Description == "" ? ToCamel(c.ColumnName) : c.Description #>" prop="<#=ToCamel(c.ColumnName) #>" label-for="<#=ToCamel(c.ColumnName) #>" element-id="<#=ToCamel(c.ColumnName) #>">
                        <Select v-model="queryData.<#=ToCamel(c.ColumnName) #>" disabled>
                            <Option :value=1>是</Option>
                            <Option :value=0>否</Option>
                        </Select>
                   </FormItem>
                   <#} else {#>
	               <FormItem label="<#= c.Description == "" ? ToCamel(c.ColumnName) : c.Description #>" prop="<#=ToCamel(c.ColumnName) #>" label-for="<#=ToCamel(c.ColumnName) #>">
                       <Input v-model="queryData.<#=ToCamel(c.ColumnName) #>" placeholder="请输入" element-id="<#=ToCamel(c.ColumnName) #>" @keydown.enter.native="getData"/>
                   </FormItem>
                   <#}#>
                </bingo-grid-item>
           <#}#>
 <#}#>
		
</bingo-query>
            <bingo-table
                    ref="table"
                    @getData="getData"
                      <#if(isEditable()){#>
                    @on-new="add"
                    @on-delete="deleteData"
                    <#}#>
                    :columns="columns"
                    :data="data"
                    :toolbar="model.toolbar"
                    :border="model.border"
                    :page="model.page"
                    :pageSetting="model.pageSetting"
                    :showAllButton="model.showAllButton"
            >
                <Button type='primary' customIcon='iconfont icondaochu' @click="exportFile" >导出</Button>
                <#if(isEditable()){#>
                <span slot="action" slot-scope="{ row, index }">
                    <bingo-action-drop>
                        <a @click="edit (row)">编辑</a>
                        <span slot="list">
                            <DropdownItem>
                                <span @click="edit (row)">编辑</span>
                            </DropdownItem>
                            <# if (hasDetail()) { #><DropdownItem>
                                <span @click="editDetailItem(row)">配置细表</span>
                            </DropdownItem><# } #>
                            <DropdownItem>
                                <span @click="del (row)">删除</span>
                            </DropdownItem>
                         </span>
                    </bingo-action-drop>
                </span>
                <#}#>
                <# foreach (ColumnInfo c in host.Fieldlist) {
  				    if (!c.IsPrimaryKey && !c.IsIdentity) {
  				        if(c.ColumnName.Contains("is_") ||  c.TypeName.ToString()=="datetime" || c.TypeName.ToString()=="date") {#>
  				          <span slot="<#=ToCamel(c.ColumnName) #>" slot-scope="{ row, index }">
                  	    	  {{row.<#=ToCamel(c.ColumnName) #> | format<#=ToCamel_FirstUpper(c.ColumnName) #>}}
              		     </span>
  				        <#}#>
                    <#}#>
                <#}#>
            </bingo-table>
            <#if(isEditable()){#>
            <!-- 主表修改弹出框-->
             <bingo-modal-form ref="form" :col="col" title="表单"  :data="modalData" :width="800" :labelWidth="120"
                              :button="false" :rules="rules" @on-save="handleSubmit">
                <# foreach (ColumnInfo c in host.Fieldlist) { #>
                <# if (!c.IsPrimaryKey && !c.IsIdentity) { #>
                <bingo-grid-item>
                    <FormItem label="<#= c.Description == "" ? ToCamel(c.ColumnName) : c.Description #>"  prop="<#=ToCamel(c.ColumnName) #>">
                    <Input v-model="modalData.<#=ToCamel(c.ColumnName) #>"
                           placeholder="<#= c.Description == "" ? ToCamel(c.ColumnName) : c.Description #>" />
                    <!-- :autosize="{maxRows:5,minRows: 5}" type ='textarea' style="height:100px"-->
                    </FormItem>
                </bingo-grid-item>
                <# } #>
                <# } #>
             </bingo-modal-form>
            <# } #>
        </Card>
    </div>
</template>	

<script>
    import bingoModalForm  from '@/components/bingo-modal-form';
    import bingoGridItem from '@/components/bingo-query/bingo-grid-item';
    import bingoTable from '@/components/bingo-table';
    import bingoQuery from '@/components/bingo-query';
    import bingoModal from '@/components/bingo-modal';
    import bingoActionDrop from '@/components/bingo-action-drop';
    import {formatDate} from "view-design/src/components/date-picker/util";

    import * as Api from '@/api/masterdata/dict/dict';
    export default {
        data () {
            return {
                excelsImport:Api.excelsImport,
                loading:false,
                //输入框的查询值
                queryData: {
                   <# foreach (ColumnInfo c in host.Fieldlist) { #>
                   <#=ToCamel(c.ColumnName) #>: '',
                   <# } #>
          		 },
                fullFlag: false,
                <#if(isEditable()){#>
                col: 1,
                <#}#>
                columns: [ 
               			{
                     	     type: 'selection',
                     	     width: 60,
                         	 align: 'center',
                        	 fixed: 'left'
                  	    },
                    	{
                      		  type: 'index',
                      		  width: 60,
                      		  align: 'center',
                      		  fixed: 'left'
                       },
                    <# if(isEditable()){#>
                        {
                            title: '操作',
                            key: 'action',
                            width: 100,
                            slot: 'action',
                            fixed: 'left',
                            align: 'center'
                        },
                    <#}#>
           <# foreach (ColumnInfo c in host.Fieldlist) {
                if (!c.IsPrimaryKey && !c.IsIdentity) { #>
                    {
                        title: '<#=c.Description #>',
                        key: '<#=ToCamel(c.ColumnName) #>',
                        minwidth: 120,
                        sortable: true,
                        resizable: true,
                        <# if (c.TypeName.ToString()=="datetime" || c.TypeName.ToString()=="date" || c.ColumnName.Contains("is_")) { #>
                        slot:'<#=ToCamel(c.ColumnName) #>',//当用filters时，需要定义一个slot(bool类型，日期格式)
                        <#}#>

                     <# if(c.ColumnName.Contains("is_")) {#>
                            //表格过滤小箭头[是、否]
                            filters: [
                                {
                                    label: '是',
                                    value: 1
                                },
                                {
                                    label: '否',
                                    value: 0
                                }
                            ],
                            //选择过滤选项时触发的前台过滤方法
                            filterMethod (value, row) {
                                if (value === 0) {
                                    return row.<#=ToCamel(c.ColumnName) #> == 0;
                                } else if (value === 1) {
                                    return row.<#=ToCamel(c.ColumnName) #> == 1;
                                }
                            },
                     <#}#>
                    },
           <# } } #>
            
            ],
                data: [],
                model: {
                    toolbar: true,
                    border: true,
                    page: true,
                    pageSetting: {
                        pageNum: 1,//第几页
                        pageTotal: 50,//总记录数
                        pageSize: 15,//每页多少条
                        showSizer: true,
                        pageSizeOpts: [15, 20, 30, 50,100]
                    },
                      <# if(isEditable()){#>
                        showAllButton:true,
                      <#}else{#>
                        showAllButton:false,   
                      <#}#>
                },
                query: {
                    col: 4,
                    labelWidth: 90
                },
            <# if(isEditable()){#>
                //主表编辑页面的校验
                rules: {
                <# foreach (ColumnInfo c in host.Fieldlist) { #>
                <# if (!c.IsPrimaryKey && !c.IsIdentity) { #>
<#=ToCamel(c.ColumnName) #>: [ { required: true, message: '不能为空', trigger: 'change' }],
                <# }#>
               <# } #>
                },
                //主表弹出框的数据模型
                modalData: {
                <# foreach (ColumnInfo c in host.Fieldlist) { #>
                <# if (!c.IsPrimaryKey && !c.IsIdentity) { #>
                    <#=ToCamel(c.ColumnName) #>:"",                
                <# }#>
                <# } #>   
                },
            <#}#>
            }
        },
        components: {
            bingoTable, bingoQuery, bingoModal, bingoModalForm, bingoGridItem,bingoActionDrop
        },
        filters: {
                     <# foreach (ColumnInfo c in host.Fieldlist){ #>
                    <# if (!c.IsPrimaryKey && !c.IsIdentity) {#>
                                <#if(c.ColumnName.Contains("is_")) {#>
                                        format<#=ToCamel_FirstUpper(c.ColumnName) #> (value) {
                                            let <#=ToCamel_FirstUpper(c.ColumnName) #> = ""
                                            if (value == 1) {
                                                <#=ToCamel_FirstUpper(c.ColumnName) #> = "是"
                                            } else if (value == 0) {
                                                <#=ToCamel_FirstUpper(c.ColumnName) #> = "否"
                                            }
                                            return <#=ToCamel_FirstUpper(c.ColumnName) #>;
                                        },
                                 <#}#>
                                 <#if(c.TypeName.ToString()=="datetime" || c.TypeName.ToString()=="date") {#>
                                        format<#=ToCamel_FirstUpper(c.ColumnName) #> (value) {                                             
                                             return    formatDate(value)
                                         },
                                 <#}#>
                    <#}}#>
                 },
        methods: {
            getData () {
                this.$refs.table.setLoading();
                let params={};
                params=Object.assign(this.$refs.table.getParams(),this.$refs.query.getParams())
              
                Api.getTableData(params).then(res => {
                    this.$refs.table.setLoading();
                    this.model.pageSetting.pageTotal = res.data.total;//总记录数
                    this.data = res.data.rows;
                })
            },
        <# if(isEditable()){#>
            handleSubmit () {
                if(this.modalData.id){
                    Api.editTableData(this.modalData).then(res => {
                        this.$Message.success(res.msg);
                        this.$refs.form.show = false;
                        this.getData ();
                    })
                }else {
                    Api.addTableData(this.modalData).then(res => {
                        this.$Message.success(res.msg);
                        this.$refs.form.show = false;
                        this.getData ();
                    })
                }

            },
            add(){
                this.$refs.form.show = true;
                this.$refs.form.resetFields();
            },
            edit (row) {
                this.$refs.form.show = true;
                Api.getTableDetailById(row.id).then(res => {
                    this.modalData=res.data;
                })
            },
            del (row) {
                this.$Modal.confirm({
                    title: '二次确认提示',
                    content: '<p>确定删除此操作吗</p>',
                    onOk: () => {
                        Api.delTableData(row.id).then(res => {
                            this.$Message.success(res.msg);
                            this.getData ();
                        })
                    }
                });
            },
            //批量删除
            deleteData () {
                let idArr= [];
                for(let data of this.$refs.table.selection){
                    idArr.push(data.id);
                }
                this.$Modal.confirm({
                    title: '二次确认提示',
                    content: '<p>确定批量删除选中项此吗</p>',
                    onOk: () => {
                        Api.deleteBatch({ids:idArr}).then(res => {
                            this.$Message.success(res.msg);
                            this.getData ();
                        })
                    }
                });

            },
            <#}#>

            exportFile () {
                let data={
                    "entity":{
                    },
                    "option":{
                        "all":true,
                        "autoWidth":true,
                        "progressKey":"string"
                    }
                }
                Api.exportExcel(data).then(res => {
                    window.location.href = Api.download + res.data.filePath;
                })
            },
        },
        mounted () {
            this.getData();
        }
    }
</script>
<style scoped>

</style>



<#+





//convert to camel
 private string ToCamel(string item)
        {
             while (item.IndexOf('_') >= 0)
            {

               string newUpper = item.Substring(item.IndexOf('_'), 2);

               item =   item.Replace(newUpper, newUpper.Trim('_').ToUpper());                

            }
            return item;
        }
        
 private string ToCamel_FirstUpper(string item)
        {        
            
            while (item.IndexOf('_') >= 0)
            {
               string newUpper = item.Substring(item.IndexOf('_'), 2);
               item =   item.Replace(newUpper, newUpper.Trim('_').ToUpper());               

            }
           item= item.Remove(1).ToUpper() + item.Substring(1);
            return item;
        }



//增删查改： 0 为不能， 1 为能。
private bool isEditable()
{
    int isEditable=1;
    if(isEditable==1) return true;
    return false;
}




// you can set  whether you has a detail Table or not. Default is true, and will create the detail table.
// if no detail table ,please set to false;

private bool hasDetail()
{
    int hasDetail=1;
    if(hasDetail==1) return true;
    return false;
}



#>