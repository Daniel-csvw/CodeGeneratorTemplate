<#@ template language="c#" HostSpecific="True" #>
<#@ output extension= ".vue" #>
<#
	TableHost host = (TableHost)(Host);	
#>
	 
<template>
    <div class="content-inner" v-getAuths="[getAuths,'/<#=ApiServiceName#>/<#=ApiFileName#>/list']">
     <!--<div class="content-inner" v-getAuths="[getAuths,'/master-data/function-app/list']">  注意这个是后台的路由。检查下-->

        <Card>
             <!-- 查询框-->
            <bingo-query ref="query" type="modal" :col="query.col" :labelWidth="query.labelWidth" @on-submit="getData" @on-reset="getData" :data="queryData" >	
 <# foreach (ColumnInfo c in host.Fieldlist) { #>
		  <# if (!c.IsPrimaryKey && !c.IsIdentity) { #>
			<bingo-grid-item>
                <FormItem :label="$t('<#=i18nMicroSerivceDir#>.page.<#=i18nMicroSerivceModule#>.<#= ToCamel(c.ColumnName) #>')" prop="<#=ToCamel(c.ColumnName) #>" label-for="<#=ToCamel(c.ColumnName) #>">
                      <Input v-model.trim="queryData.<#=ToCamel(c.ColumnName) #>"  element-id="<#=ToCamel(c.ColumnName) #>" />
                </FormItem>
            </bingo-grid-item>	
           <# } #> 
 <# } #> 		
</bingo-query>
         <!-- 主表     -->
            <bingo-table
                    ref="table"
                    layoutName="<#=ApiServiceName #>-<#=ApiModuleName #>-<#= host.TableName #>"      
                    @getData="getData"                    
                    @on-new="add"
                    @on-delete="deleteBatch"
                    @on-selection-change='handleSelectionChange'
                    :columns="columns"
                    :data="data"
                    :toolbar="model.toolbar"
                    :border="model.border"
                    :page="model.page"
                    :pageSetting="model.pageSetting"
                    :showNew="showNew"
                    :showDelete="showDelete"

                   
            >
                 <!--<Button type='primary' customIcon='iconfont icondaochu' @click="exportFile" >导出</Button> -->
                <span slot="action" slot-scope="{ row, index }">
                    <bingo-action-drop>  
                        <a v-if="showEdit" @click="edit (row)">{{$t('<#=i18nMicroSerivceDir#>.page.buttons.edit')}}</a>
                        <a v-else   @click="edit (row)">{{$t('<#=i18nMicroSerivceDir#>.page.buttons.view')}}</a>
                        <span slot="list" v-if="showEdit">
                            <DropdownItem>
                                <span  @click="edit (row)">{{$t('<#=i18nMicroSerivceDir#>.page.buttons.edit')}}</span>
                            </DropdownItem>
							<# if (hasDetail()) { #>
							<DropdownItem>
                                <span @click="editDetailItem(row)">打开子表记录</span>
                            </DropdownItem>
							<# } #>  
                            <DropdownItem>
                                <span  @click="delOne (row)">{{$t('<#=i18nMicroSerivceDir#>.page.buttons.delete')}}</span>
                            </DropdownItem>
                         </span>   
                    </bingo-action-drop>
                </span>
                <span slot="gesch" slot-scope="{ row, index }">
                   {{row.gesch | formatGesch}}
                </span>
            </bingo-table>
             <!-- 主表修改弹出框-->
             <bingo-modal-edit   :showToolbar= "showEdit"  :title="$t('')" :width="800" v-model.trim="showForm"
                              @on-save="handleSubmit(1)" @on-save-cancel="handleSubmit(0)" :rows="3">
                <bingo-form ref="form" :col=1 :rules="rules" :data="modalData" :button="false" :labelWidth="120">
<# foreach (ColumnInfo c in host.Fieldlist) { #>
                  <# if (!c.IsPrimaryKey && !c.IsIdentity) { #>
 <bingo-grid-item>
                    <FormItem :label="$t('<#=i18nMicroSerivceDir#>.page.<#=i18nMicroSerivceModule#>.<#= ToCamel(c.ColumnName) #>')"  prop="<#=ToCamel(c.ColumnName) #>">
                        <Input v-model.trim="modalData.<#=ToCamel(c.ColumnName) #>" maxlength="50" />                                                    
                    </FormItem>  
                </bingo-grid-item>
                <# } #>

 <# } #>     
                 
                   <# if (hasAttachment()) { #>
                     <!-- 是否有上传图片功能--> 
                    <!--上传图片功能-->
                    <bingo-grid-item   v-if="webUpload.showImg">
                        <FormItem :label="$t('<#=i18nMicroSerivceDir#>.page.<#=i18nMicroSerivceModule#>.pic')"  >
                            <bingo-webupload
                                    ref="webupload"
                                    :serveOption="webUpload.serveOptionSign"
                                    :multiple="true"
                                    :showFileButton="false"
                                    :authDown="showEdit"
                                    :authUpload="showEdit"
                                    :authDelete="showDelete"
                            ></bingo-webupload>
                        </FormItem>
                    </bingo-grid-item>

                   <# } #>  
                    
					
					
					

           </bingo-form>
            </bingo-modal-edit>
            
        </Card>
    </div>
</template>	

<script>
    import bingoGridItem from '@/components/bingo-query/bingo-grid-item';
    import bingoTable from '@/components/bingo-table';
    import bingoQuery from '@/components/bingo-query';
    import bingoActionDrop from '@/components/bingo-action-drop';
    import bingoModalEdit from '@/components/bingo-modal/bingo-modal-edit';
    import bingoForm from '@/components/bingo-query/bingo-form'; 
	

    <# if (hasAttachment()) { #>
    import bingoWebupload from "@/components/bingo-webupload";
    <# } #>  
  


    //import * as Api from '@/api/<#=ApiServiceName #>/<#=ApiModuleName #>/<#=ApiFileName#>'
    
    export default {
        data () {
            return {
                authList: [],
                showDelete:false,
                showNew :false,
                showEdit:false,
                
                loading:false,               
                //输入框的查询值
                queryData: {
           <# foreach (ColumnInfo c in host.Fieldlist) { #>
           <#=ToCamel(c.ColumnName) #>: '',
           <# } #>
          		 },
                fullFlag: false,
                selectData: [],
                columns: [ 
               		
                    {
                        type: 'index',
                        width: 60,
                        align: 'center',
                        fixed: 'left',
                        title: $t('<#=i18nMicroSerivceDir#>.page.common.index')
                    },
                    {
                        type: 'selection',
                        width: 60,
                        align: 'center',
                        fixed: 'left'
                    },
                    {
                        title: $t('<#=i18nMicroSerivceDir#>.page.common.operate'),
                        key: 'action',
                        width: 100,
                        slot: 'action',
                        fixed: 'left',
                        align: 'center'
                    },
<# foreach (ColumnInfo c in host.Fieldlist) {                    
  if (!c.IsPrimaryKey && !c.IsIdentity) { #>                      
                    {                      
                        title:$t('<#=i18nMicroSerivceDir#>.page.<#=i18nMicroSerivceModule#>.<#=ToCamel(c.ColumnName) #>'),
                        key: '<#=ToCamel(c.ColumnName) #>',
                        width: 120,
                        resizable: true

                    },<# }  } #>
                ],
                data: [],
                model: {
                    toolbar: true,
                    border: true,
                    page: true,
                    pageSetting: {
                        pageNum: 1,//第几页
                        pageTotal: 50,//总记录数
                        pageSize: 40,//每页多少条
                        showSizer: true,
                        pageSizeOpts: [15, 20, 30, 50,100]
                    },
                    showAllButton:true
                },
                query: {
                    col: 4,
                    labelWidth: 90
                },
                //主表编辑页面的校验
                 rules: {                    
                     <# foreach (ColumnInfo c in host.Fieldlist) { #>                    
                       <#=ToCamel(c.ColumnName) #>: [
                          { required: true, message: $t('<#=i18nMicroSerivceDir#>.validate.emptyCheck'), trigger: 'blur' }
                       ],                    
                      <# } #>
},
                //主表弹出框的数据模型
                modalData: {
                    <# foreach (ColumnInfo c in host.Fieldlist) { #>
                    <#=ToCamel(c.ColumnName) #>:'',
                    <# } #>
},
                showForm: false,
                
			 
               <# if (hasAttachment()) { #>  
                //上传图片控件
                webUpload:{
                    showImg: false,
                    folderName: "",
                    serveOptionSign: {
                        folderId: "", //文件夹名 'measure@folder'+'<'+this.measure.stateId+'>'
                        name: "function_app",
                        parentId: "e0001",
                        rootId: "0001",
                        systemId: "organization",
                        busId: "",
                        busTable: "",
                        busTag: ""
                    }
                },
               <# } #> 

            }
        },
        components: {
             <# if (hasAttachment()) { #>
			 bingoWebupload,
			 <# } #>  
			 bingoTable, bingoQuery, bingoForm, bingoModalEdit, bingoGridItem, bingoActionDrop

        },

        methods: {
            getAuths(data) {
                this.authList = data
                for (let i = 0; i < data.length; i++) {

                    if (data[i]['new'] != undefined && data[i]['new'] == 2) {
                        this.showNew = true;
                    }
                    if (data[i]['delete'] != undefined && data[i]['delete'] == 2) {
                        this.showDelete = true;
                    }
                    if (data[i]['edit'] != undefined && data[i]['edit'] == 2) {
                        this.showEdit = true;
                    }
                }
            },
            getData() {
                this.selectData = [];
                this.$refs.table.setLoading();
                let params = Object.assign(this.$refs.table.getParams(), this.$refs.query.getParams());
                params = {...params, ...{<#=DeleteFlag#>: 0}};
                
                // 这里改成自己的api method
                Api.Page(params).then(res => {
                    this.$refs.table.setLoading();
                    this.model.pageSetting.pageTotal = res.data.total;
                    this.data = res.data.rows;
                })
            },
            handleSelectionChange(items) {
                this.selectData = items;
            },
			
          
        <# if (hasAttachment()) { #>
            showWebUpload(){
                this.webUpload.showImg = true;
                this.webUpload.serveOptionSign = {};
                this.webUpload.folderName = this.modalData.id;
                this.webUpload.serveOptionSign.folderId ="<#=i18nMicroSerivceDir#>@functionapp-folder-funapp-" + this.webUpload.folderName;
                this.webUpload.serveOptionSign.busId =  this.webUpload.folderName;
                this.webUpload.serveOptionSign.name = "funapp";
                this.webUpload.serveOptionSign.parentId = "e0001";
                this.webUpload.serveOptionSign.rootId = "0001";
                this.webUpload.serveOptionSign.systemId = "organization";
                this.webUpload.serveOptionSign.busTable = "funapp";
                this.webUpload.serveOptionSign.busTag = "funapp";
            },
        <# } #>  
            
            //保存 /保存关闭              
            handleSubmit(show) {
                this.$refs.form.$refs.form.validate((valid) => {
                    if (valid) {
                        if (!this.modalData.id) { //save
                            Api.Insert(this.modalData).then(res => {
                                this.$Message.success($t('<#=i18nMicroSerivceDir#>.notice.success.save'));
                                this.modalData = res.data;
                                this.getData();
                                this.showForm = show;
                             <# if (hasAttachment()) { #>    
                                this.webUpload.showImg = true;
                                this.webUpload.serveOptionSign = {};
                                this.webUpload.folderName = this.modalData.id;
                                this.webUpload.serveOptionSign.folderId ="<#=i18nMicroSerivceDir#>@<#=ApiFileName#>-folder-funapp-" + this.webUpload.folderName;
                                this.webUpload.serveOptionSign.busId =  this.webUpload.folderName;
                                this.webUpload.serveOptionSign.name = "<#=ApiFileName#>";
                                this.webUpload.serveOptionSign.parentId = "e0001";
                                this.webUpload.serveOptionSign.rootId = "0001";
                                this.webUpload.serveOptionSign.systemId = "organization";
                                this.webUpload.serveOptionSign.busTable = "<#=ApiFileName#>";
                                this.webUpload.serveOptionSign.busTag = "<#=ApiFileName#>>";
                             <# } #> 
                                
                            }).catch(err => {
                                console.log('err' + err)
                            });
                        } else { //update
                            Api.Update(this.modalData).then(res1 => {
                                this.$Message.success($t('<#=i18nMicroSerivceDir#>.notice.success.save'));
                                this.modalData = res1.data;
                                this.getData();
                                this.showForm = show;
							 <# if (hasAttachment()) { #>    
                                this.webUpload.showImg = false;
                             <# } #> 
                            }).catch(err => {
                                console.log('err' + err); // 异常情况
                            });
                        }
                    } else {
                        this.$BMessage.warning($t('<#=i18nMicroSerivceDir#>.notice.warning.completeCheck'));
                    }
                });
            },
            add() {
                this.initModalData();
                this.showForm = true;
            },
            edit(row) {
                this.initModalData();
                this.showForm = true;
                Api.getById(row.id).then(res => {
                    this.modalData = res.data;
                    
					<# if (hasAttachment()) { #> 
                    //初始化图片
                    this.$nextTick(()=>{
                        this.webUpload.showImg = true;
                        this.webUpload.serveOptionSign = {};
                        this.webUpload.folderName = this.modalData.id;
                        this.webUpload.serveOptionSign.folderId ="<#=i18nMicroSerivceDir#>@<#=ApiFileName#>-folder-funapp-" + this.webUpload.folderName;
                        this.webUpload.serveOptionSign.busId =  this.webUpload.folderName;
                        this.webUpload.serveOptionSign.name = "funapp";
                        this.webUpload.serveOptionSign.parentId = "e0001";
                        this.webUpload.serveOptionSign.rootId = "0001";
                        this.webUpload.serveOptionSign.systemId = "organization";
                        this.webUpload.serveOptionSign.busTable = "<#=ApiFileName#>";
                        this.webUpload.serveOptionSign.busTag = "<#=ApiFileName#>";
                    });
                    <# } #> 
                    
                    
                })
            },
            del(idArr) {
                this.$Modal.confirm({
                    title: $t('<#=i18nMicroSerivceDir#>.reminder.confirm'),
                    content: $t('<#=i18nMicroSerivceDir#>.reminder.delete'),
                    onOk: () => {
                        Api.DeleteBatch(idArr).then(res => {

                            this.$Message.success($t('<#=i18nMicroSerivceDir#>.notice.success.delete'));
                            this.getData();
                        })
                    }
                });
            },
            delOne(row) {
                this.del([row.id]);
            },
            deleteBatch() { //批量删除
                let idArr = this.selectData.map(x => x.id);
                if (idArr.length < 1) {
                    this.$BMessage.warning($t('<#=i18nMicroSerivceDir#>.notice.warning.selectCheck')); //(res.msg);
                    return;
                }
                this.del(idArr);
            },
            initModalData() {
                this.modalData = {
                    <# foreach (ColumnInfo c in host.Fieldlist) { #>
                    <#=ToCamel(c.ColumnName) #>:'',
                    <# } #>
                };
                
               <# if (hasAttachment()) { #>  
                 	 this.webUpload.showImg = false;             
               <# } #> 
              

            },
            exportFile() {
                Api.Excel({all: true}).then(res => {
                    window.location.href = Api.download + res.data.filePath;
                })
            },

        },
        mounted() {
        }
    }
</script>
<style scoped>

</style>


<!-- 

//api接口

import request from '@/plugins/request';

//后台服务controller的接口路径 
//const URI = `/${window.$<#=ApiServiceName #>}/<#=ApiModuleName #>/<#= host.TableName #>`;
const URI = '/<#=ApiServiceName #>/<#=ApiModuleName #>/<#= host.TableName #>';
// 分页查询
export function Page (data) {
    return request({
        url: `${URI}/page`,
        method: 'get',
        params: data
    });
}

// 根据ID获取信息
export function getById (id) {
    return request({
        url: `${URI}/`  + id,
        method: 'get'
    });
}


// 新建
export function Insert (data) {
    return request({
        url: `${URI}`,
        method: 'post',
        data
    });
}


// 修改
export function Update (data) {
    return request({
        url: `${URI}`,
        method: 'put',
        data
    });
} 

// 批量删除（单个删除也用这个）
export function DeleteBatch (ids) {
    return request({
        url: `${URI}/batch?ids=`+ids,
        method: 'delete',
    });
}







-->
 


 <!-- 国际化

export default {
    locale: 'zh-CN',
    language: '简体中文',
    menu: {
        i18n: '多语言'
    },
    page: {
        //通用的字段信息, 如果用到的请打开注释，没有的自行添加
        common: {
            index: '序号',
            operate: '操作',
            EditFormCaption: '表单详情',
            // name: '名称',
            // shortName: '简称',
            // description: '描述',
            // creator: '创建人',
            // createTime: '创建日期',
            // modifier: '修改人',
            // modifyTime: '修改日期',
            // create: '创建信息',
            // modify: '修改信息',
            // color: '颜色',
            // legend: '图例',
            // selectOne: '请至少选择一条数据！',
            // require: '必填项不能为空',
            // maxLength: '不得超过{size}个字符',
            // basic: '基本信息',
            // type: '类型',
            // selectTemplate: '选择模板',
            // version: '版本',
            // state: '状态',
            // sopTime: 'SOP日期',
            // publish: '发布状态',
            // active: '生效状态',
            // template: '模板',
            // department: '部门',
            // section: '股',
            // header: '负责人',
            // sectionChief: '股长',
            // level: '级别',
            // dateRange: '日期范围',
            // selectedData: '已选择的数据',
            // attachment: '附件',
            // taskInfo: '任务信息',
            // planInfo: '计划信息',
            // hasNoData: '数据实体不存在，请与管理员联系！'


        },
        //所有的按钮文字都放这里(按钮都类似，放这里不要放各自模块)
        buttons: {
            new: '新建',
            edit: '编辑',
            editMultiple: '批量编辑',
            view: '查看',
            delete: '删除',
            deleteMultiple: '批量删除',
            refresh: '刷新',
            export: '导出',
            // exportImage: '导出图片',
            // exportPPT: '导出PPT',
            save: '保存',
            saveAndClose: '保存并关闭',
            close: '关闭',
            // revoke: '撤回',
            // preview: '预览',
            // allocate: '分配资源',
            // quoteTemplate: '模板引用',
            // startUsing: '启用',
            // stopUsing: '停用',
            // publish: '发布',
            // active: '生效',
            // upgrade: '升级',
            // version: '版本管理',
            // compare: '快速对比',
            // template: '选择模板',
            // contrast: '对比',
            // contrastSop: 'SOP对齐对比',
            // reset: '重置',
            // finish: '完成',
            cancel: '取消',
            confirm: '确定',
            layout: '设置布局',
        },

        /*  这里写各个模块自己独有的，一般指字段名的国际化*/
       <#=i18nMicroSerivceModule#>:{
        <# foreach (ColumnInfo c in host.Fieldlist) { #>
<# if (!c.IsPrimaryKey && !c.IsIdentity) { #>
<#=ToCamel(c.ColumnName) #>: '<#=c.Description #>',
              <#}#>
       <# } #> 


       }
    },
    //提示信息
    reminder: {
        delete: '是否确认删除？',
        // publish: '发布后数据被冻结不可再维护，是否确认？',
        // publishInvalid: '存在<a><strong>{count}</strong></a>个未下发的任务，请确认所有的任务都下发后再发布！',
        // upgrade: '升级后的版本为<a><strong>{version}</strong></a>，当前版本数据无法回退，您确定要执行此操作吗？',
        // active: '是否确认生效？',
        // quote: '列表中已经存在的数据将被清空！',
        // processing: '数据处理中，请稍后...',
        // upgrading: '升级处理中，请稍后...',
        // stopPlan: '计划停用后，所有的任务都会中止进行，是否确认操作？',
        // startPlan: '计划启用后，所有的任务都会恢复进行，是否确认操作？',
        // header: '任务中的【负责人】不能为空！',
        // name: '任务中的【名称】不能为空！',
        // referenceMilestone: '任务中的【前置任务】和【主里程碑参考点】不能同时为空！',
        // sendTask: '是否确认发送任务?',
        // resendTask: '已下发的任务会重新发送，是否确认发送?',
        // stopTask: '是否确认停用/启用任务？',
        // initializing: '正在初始化数据，请稍后...',
        // startUsing: '启用后数据不可再维护，是否确认？',
        // stopUsing: '停用后数据不可被计划使用，是否确认？',
        // finishTask: '是否确认完成此任务?'
    },
    //返回信息
    notice: {
        //成功的信息
        success: {
            save: '保存成功！',
            edit: '修改成功！',
            delete: '删除成功！',
            // publish: '发布成功！',
            // active: '生效成功！',
            // upgrade: '升级成功！',            
            // startUsing: '启用成功！',
            // stopUsing: '停用成功！',
            // stopPlan: '计划停用成功！',
            // startPlan: '计划启用成功！',
            // taskSend: '任务下发成功！'
        },
        //警告信息
        warning: {
            save: '信息填写不完整！',
            completeCheck: '您填写的信息不完整！',
            selectCheck: '请选择一条数据！',

            // invalidTask: '任务信息中存在未填写的数据项！',
            // dataOutOfRange: '只有当前帐号创建的数据可被删除！'
        },
        //报错信息
        error: {}
    },
    //验证
    validate: {
        predecessor: '只能有一个',
        emptyCheck: '不能为空'
    }
}


 


 -->

<#+
    //驼峰处理
   private string ToCamel(string item)
        {
             while (item.IndexOf('_') >= 0)
            {

               string newUpper = item.Substring(item.IndexOf('_'), 2);

               item =   item.Replace(newUpper, newUpper.Trim('_').ToUpper());                

            }
            return item;
        }
      
      
      
      
   
  //是否有细表 0 没有，1，有
  private bool hasDetail()
  {     
     int hasDetail= 0;  //改这里
     if(hasDetail==1) return true;  
     return false;
  }
  
  
  //是否有附件 0 没有，1，有
  private bool hasAttachment()
  {     
     int hasAttachment= 0;  //改这里
     if(hasAttachment==1) return true;  
     return false;
  }
  
  
  
   // 前端api路径配置（就是前端src\api\ApiServiceName\ApiModuleName\ApiFileName）
   
   //Api 微服务名目录
   private string ApiServiceName="chips";    
   //Api模块
   private string ApiModuleName="chips";    
   // Api文件名
   private string ApiFileName="chips";  
   
   
   //国际化配置   (src\i18n\locale\i18nMicroSerivceDir)
   //国际化目录名（理论上和微服务名一致）   
   private string i18nMicroSerivceDir ="chips"; 
   
   //国际化的模块名 ,这个是代码里面的，page下级的模块名
   private string i18nMicroSerivceModule ="chips"; 
   
  
   
   
   //删除标志位的属性名(不是数据库字段名,是java类中的属性), 一般为驼峰
    private string DeleteFlag ="isDelete"; 
   
   
   
   
   
   
 

#>
