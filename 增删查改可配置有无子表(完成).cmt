<#@ template language="c#" HostSpecific="True" #>
<#@ output extension= ".aspx" #>
<#
	TableHost host = (TableHost)(Host);			
	
#>
	 
<template>
    <div class="content-inner">
        <Card>
             <!-- 查询框-->
            <bingo-query ref="query" type="modal" :col="query.col" :labelWidth="query.labelWidth" @on-submit="getData" @on-reset="getData" :data="queryData" >	
 <# foreach (ColumnInfo c in host.Fieldlist) { #>
		  <# if (!c.IsPrimaryKey && !c.IsIdentity) { #>
			<bingo-grid-item>
                <FormItem label="<#= c.Description == "" ? ToCamel(c.ColumnName) : c.Description #>" prop="<#=ToCamel(c.ColumnName) #>" label-for="<#=ToCamel(c.ColumnName) #>">
                      <Input v-model.trim="queryData.<#=ToCamel(c.ColumnName) #>"  element-id="<#=ToCamel(c.ColumnName) #>" />
                </FormItem>
            </bingo-grid-item>	
           <# } #> 
 <# } #> 
		
</bingo-query>
         <!-- 主表-->
            <bingo-table
                    ref="table"
                    layoutName=""       <!-- 请按照实际路由或者界面写一个唯一的布局名字-->  
                    @getData="getData"                    
                    @on-new="add"
                    @on-delete="deleteBatch"
                    @on-selection-change='handleSelectionChange'
                    :columns="columns"
                    :data="data"
                    :toolbar="model.toolbar"
                    :border="model.border"
                    :page="model.page"
                    :pageSetting="model.pageSetting"
                    :showAllButton="model.showAllButton"
                   
            >
                <Button type='primary' customIcon='iconfont icondaochu' @click="exportFile" >导出</Button>
                <span slot="action" slot-scope="{ row, index }">
                    <bingo-action-drop>
                        <a @click="edit (row)">{{$t('<#=GJHModule#>.page.buttons.edit')}}</a>
                        <span slot="list">
                            <DropdownItem>
                                <span @click="edit (row)">{{$t('<#=GJHModule#>.page.buttons.edit')}}</span>
                            </DropdownItem>                        
                            <# if (hasDetail()) { #><DropdownItem>
                                <span @click="editDetailItem(row)">打开子表记录</span>
                            </DropdownItem><# } #>                          
                            <DropdownItem>
                                <span @click="delOne (row)">{{$t('<#=GJHModule#>.page.buttons.delete')}}</span>
                            </DropdownItem>
                         </span>
                    </bingo-action-drop>
                </span>
                <span slot="gesch" slot-scope="{ row, index }">
                   {{row.gesch | formatGesch}}
                </span>
            </bingo-table>
             <!-- 主表修改弹出框-->
             <bingo-modal-edit :title="$t('')" :width="800" v-model.trim="showForm"
                              @on-save="handleSubmit(1)" @on-save-cancel="handleSubmit(0)" :rows="3">
                <bingo-form ref="form" :col=1 :rules="rules" :data="modalData" :button="false" :labelWidth="120">
<# foreach (ColumnInfo c in host.Fieldlist) { #>
                  <# if (!c.IsPrimaryKey && !c.IsIdentity) { #>
 <bingo-grid-item>
                    <FormItem label="<#= c.Description == "" ? ToCamel(c.ColumnName) : c.Description #>"  prop="<#=ToCamel(c.ColumnName) #>">
                        <Input v-model.trim="modalData.<#=ToCamel(c.ColumnName) #>" 
                               placeholder="<#= c.Description == "" ? ToCamel(c.ColumnName) : c.Description #>" />
                                <!-- :autosize="{maxRows:5,minRows: 5}" type ='textarea' style="height:100px"-->                          
                    </FormItem>  
                </bingo-grid-item>
                <# } #>

 <# } #>                
           </bingo-form>
            </bingo-modal-edit>
            
        </Card>
    </div>
</template>	

<script>
    import bingoGridItem from '@/components/bingo-query/bingo-grid-item';
    import bingoTable from '@/components/bingo-table';
    import bingoQuery from '@/components/bingo-query';
    import bingoActionDrop from '@/components/bingo-action-drop';
    import bingoModalEdit from '@/components/bingo-modal/bingo-modal-edit';
    import bingoForm from '@/components/bingo-query/bingo-form'; 

    import * as Api from '@/api/<#=ApiServiceName #>/<#=ApiModuleName #>/<#=ApiFileName#>'
    
    export default {
        data () {
            return {
                
                loading:false,               
                //输入框的查询值
                queryData: {
           <# foreach (ColumnInfo c in host.Fieldlist) { #>
           <#=ToCamel(c.ColumnName) #>: '',
           <# } #>
          		 },
                fullFlag: false,
                selectData: [],
                columns: [ 
               		
                    {
                        type: 'index',
                        width: 60,
                        align: 'center',
                        fixed: 'left',
                        title: $t('masterdata.page.common.index')
                    },
                    {
                        type: 'selection',
                        width: 60,
                        align: 'center',
                        fixed: 'left'
                    },
                    {
                        title: $t('masterdata.page.common.operate'),
                        key: 'action',
                        width: 100,
                        slot: 'action',
                        fixed: 'left',
                        align: 'center'
                    },
<# foreach (ColumnInfo c in host.Fieldlist) {                    
  if (!c.IsPrimaryKey && !c.IsIdentity) { #>                      
                    {
                        title: '<#=c.Description #>',
                        key: '<#=ToCamel(c.ColumnName) #>',
                        minwidth: 120
                    },<# }  } #>
                ],
                data: [],
                model: {
                    toolbar: true,
                    border: true,
                    page: true,
                    pageSetting: {
                        pageNum: 1,//第几页
                        pageTotal: 50,//总记录数
                        pageSize: 40,//每页多少条
                        showSizer: true,
                        pageSizeOpts: [15, 20, 30, 50,100]
                    },
                    showAllButton:true
                },
                query: {
                    col: 4,
                    labelWidth: 90
                },
                //主表编辑页面的校验
                 rules: {                    
                     <# foreach (ColumnInfo c in host.Fieldlist) { #>                    
                       <#=ToCamel(c.ColumnName) #>: [
                          { required: true, message: $t('<#=GJHModule#>.validate.emptyCheck'), trigger: 'blur' }
                       ],                    
                      <# } #>
},
                //主表弹出框的数据模型
                modalData: {
                    <# foreach (ColumnInfo c in host.Fieldlist) { #> 
                       <#=ToCamel(c.ColumnName) #>:'',                    
                    <# } #>
                },
                showForm: false,

            }
        },
        components: {
            bingoTable, bingoQuery, bingoForm, bingoModalEdit, bingoGridItem, bingoActionDrop
        },

        methods: {
            getData() {
                this.selectData = [];
                this.$refs.table.setLoading();
                let params = Object.assign(this.$refs.table.getParams(), this.$refs.query.getParams());
                params = {...params, ...{<#=DeleteFlag#>: 0}};
                
                // 这里改成自己的api method
                Api.Page(params).then(res => {
                    this.$refs.table.setLoading();
                    this.model.pageSetting.pageTotal = res.data.total;
                    this.data = res.data.rows;
                })
            },
            handleSelectionChange(items) {
                this.selectData = items;
            },
            handleSubmit(tag) {
                this.$refs.form.$refs.form.validate((valid) => {
                    if (valid) {
                        if (!this.modalData.id) { //save
                            Api.Insert(this.modalData).then(res1 => {
                                this.$Message.success($t('<#=GJHModule#>.notice.success.save'));
                                this.modalData = res1.data;
                                this.getData();
                                this.showForm = !!tag;
                            }).catch(err => {
                                console.log('err' + err)
                            });
                        } else { //update
                            Api.Update(this.modalData).then(res1 => {
                                this.$Message.success($t('<#=GJHModule#>.notice.success.save'));
                                this.modalData = res1.data;
                                this.getData();
                                this.showForm = !!tag;
                            }).catch(err => {
                                console.log('err' + err); // 异常情况
                            });
                        }
                    } else {
                        this.$BMessage.warning($t('<#=GJHModule#>.notice.warning.completeCheck'));
                    }
                });
            },
            add() {
                this.initModalData();
                this.showForm = true;
            },
            edit(row) {
                this.initModalData();
                this.showForm = true;
                Api.getById(row.id).then(res => {
                    this.modalData = res.data;
                })
            },
            del(idArr) {
                this.$Modal.confirm({
                    title: $t('<#=GJHModule#>.reminder.confirm'),
                    content: $t('<#=GJHModule#>.reminder.delete'),
                    onOk: () => {
                        Api.Delete(idArr).then(res => {
                            this.$Message.success($t('<#=GJHModule#>.notice.success.delete'));
                            this.getData();
                        })
                    }
                });
            },
            delOne(row) {
                this.del([row.id]);
            },
            deleteBatch() { //批量删除
                let idArr = this.selectData.map(x => x.id);
                if (idArr.length < 1) {
                    this.$BMessage.warning($t('<#=GJHModule#>.notice.warning.selectCheck')); //(res.msg);
                    return;
                }
                this.del(idArr);
            },
            initModalData() {
                this.modalData = {
                    <# foreach (ColumnInfo c in host.Fieldlist) { #> 
                       <#=ToCamel(c.ColumnName) #>:'',                    
                    <# } #>
                };
            },
            exportFile() {
                Api.Excel({all: true}).then(res => {
                    window.location.href = Api.download + res.data.filePath;
                })
            },

        },
        mounted() {
        }
    }
</script>
<style scoped>

</style>

 

<#+
  // fun1: this fun convert the column name to camel
 private string ToCamel(string item)
        {
             while (item.IndexOf('_') >= 0)
            {

               string newUpper = item.Substring(item.IndexOf('_'), 2);

               item =   item.Replace(newUpper, newUpper.Trim('_').ToUpper());                

            }
            return item;
        }
      
      
      
      
  // fun2: 
  // you can set  whether you has a detail Table or not. Default is true, and will create the detail table.
  // if no detail table ,please set to false;
  private bool hasDetail()
  {
     //has no detail table
     int hasDetail= 0;
     
     
     // has table
     //int hasDetail= 1;
     if(hasDetail==1) return true;  
     return false;
  }
  
  
   //下面三个是定义api路径的
   
   //Api 微服务名目录
   private string ApiServiceName="master-data";    
   //Api模块
   private string ApiModuleName="functionapp";    
   // Api文件名
   private string ApiFileName="functionapp";  
   
   
   
   
   //国际化的模块目录名   
   private string GJHModule ="masterdata"; 
   
   
   //删除标志位的属性名(不是数据库字段名), 一般为驼峰
    private string DeleteFlag ="isDelete"; 
   
   
   
   
   
   
 

#>